// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudWatch {
    //MARK: Enums

    public enum AlarmType: String, CustomStringConvertible, Codable {
        case compositealarm = "CompositeAlarm"
        case metricalarm = "MetricAlarm"
        public var description: String { return self.rawValue }
    }

    public enum AnomalyDetectorStateValue: String, CustomStringConvertible, Codable {
        case pendingTraining = "PENDING_TRAINING"
        case trainedInsufficientData = "TRAINED_INSUFFICIENT_DATA"
        case trained = "TRAINED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        case lessthanlowerorgreaterthanupperthreshold = "LessThanLowerOrGreaterThanUpperThreshold"
        case lessthanlowerthreshold = "LessThanLowerThreshold"
        case greaterthanupperthreshold = "GreaterThanUpperThreshold"
        public var description: String { return self.rawValue }
    }

    public enum HistoryItemType: String, CustomStringConvertible, Codable {
        case configurationupdate = "ConfigurationUpdate"
        case stateupdate = "StateUpdate"
        case action = "Action"
        public var description: String { return self.rawValue }
    }

    public enum ScanBy: String, CustomStringConvertible, Codable {
        case timestampdescending = "TimestampDescending"
        case timestampascending = "TimestampAscending"
        public var description: String { return self.rawValue }
    }

    public enum StandardUnit: String, CustomStringConvertible, Codable {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytesSecond = "Bytes/Second"
        case kilobytesSecond = "Kilobytes/Second"
        case megabytesSecond = "Megabytes/Second"
        case gigabytesSecond = "Gigabytes/Second"
        case terabytesSecond = "Terabytes/Second"
        case bitsSecond = "Bits/Second"
        case kilobitsSecond = "Kilobits/Second"
        case megabitsSecond = "Megabits/Second"
        case gigabitsSecond = "Gigabits/Second"
        case terabitsSecond = "Terabits/Second"
        case countSecond = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public enum StateValue: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case alarm = "ALARM"
        case insufficientData = "INSUFFICIENT_DATA"
        public var description: String { return self.rawValue }
    }

    public enum Statistic: String, CustomStringConvertible, Codable {
        case samplecount = "SampleCount"
        case average = "Average"
        case sum = "Sum"
        case minimum = "Minimum"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public enum StatusCode: String, CustomStringConvertible, Codable {
        case complete = "Complete"
        case internalerror = "InternalError"
        case partialdata = "PartialData"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AlarmHistoryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "AlarmType", required: false, type: .enum), 
            AWSShapeMember(label: "HistoryData", required: false, type: .string), 
            AWSShapeMember(label: "HistoryItemType", required: false, type: .enum), 
            AWSShapeMember(label: "HistorySummary", required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp)
        ]

        /// The descriptive name for the alarm.
        public let alarmName: String?
        /// The type of alarm, either metric alarm or composite alarm.
        public let alarmType: AlarmType?
        /// Data about the alarm, in JSON format.
        public let historyData: String?
        /// The type of alarm history item.
        public let historyItemType: HistoryItemType?
        /// A summary of the alarm history, in text format.
        public let historySummary: String?
        /// The time stamp for the alarm history item.
        public let timestamp: TimeStamp?

        public init(alarmName: String? = nil, alarmType: AlarmType? = nil, historyData: String? = nil, historyItemType: HistoryItemType? = nil, historySummary: String? = nil, timestamp: TimeStamp? = nil) {
            self.alarmName = alarmName
            self.alarmType = alarmType
            self.historyData = historyData
            self.historyItemType = historyItemType
            self.historySummary = historySummary
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case alarmType = "AlarmType"
            case historyData = "HistoryData"
            case historyItemType = "HistoryItemType"
            case historySummary = "HistorySummary"
            case timestamp = "Timestamp"
        }
    }

    public struct AnomalyDetector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configuration", required: false, type: .structure), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "Stat", required: false, type: .string), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum)
        ]

        /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model, and the time zone to use for the metric.
        public let configuration: AnomalyDetectorConfiguration?
        /// The metric dimensions associated with the anomaly detection model.
        public let dimensions: [Dimension]?
        /// The name of the metric associated with the anomaly detection model.
        public let metricName: String?
        /// The namespace of the metric associated with the anomaly detection model.
        public let namespace: String?
        /// The statistic associated with the anomaly detection model.
        public let stat: String?
        /// The current status of the anomaly detector's training. The possible values are TRAINED | PENDING_TRAINING | TRAINED_INSUFFICIENT_DATA 
        public let stateValue: AnomalyDetectorStateValue?

        public init(configuration: AnomalyDetectorConfiguration? = nil, dimensions: [Dimension]? = nil, metricName: String? = nil, namespace: String? = nil, stat: String? = nil, stateValue: AnomalyDetectorStateValue? = nil) {
            self.configuration = configuration
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
            self.stateValue = stateValue
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case stat = "Stat"
            case stateValue = "StateValue"
        }
    }

    public struct AnomalyDetectorConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExcludedTimeRanges", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricTimezone", required: false, type: .string)
        ]

        /// An array of time ranges to exclude from use when the anomaly detection model is trained. Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren't used when CloudWatch creates the model.
        public let excludedTimeRanges: [Range]?
        /// The time zone to use for the metric. This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes. To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see tz database.
        public let metricTimezone: String?

        public init(excludedTimeRanges: [Range]? = nil, metricTimezone: String? = nil) {
            self.excludedTimeRanges = excludedTimeRanges
            self.metricTimezone = metricTimezone
        }

        public func validate(name: String) throws {
            try validate(self.metricTimezone, name:"metricTimezone", parent: name, max: 50)
            try validate(self.metricTimezone, name:"metricTimezone", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case excludedTimeRanges = "ExcludedTimeRanges"
            case metricTimezone = "MetricTimezone"
        }
    }

    public struct CompositeAlarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "AlarmArn", required: false, type: .string), 
            AWSShapeMember(label: "AlarmConfigurationUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "AlarmRule", required: false, type: .string), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "OKActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "StateReason", required: false, type: .string), 
            AWSShapeMember(label: "StateReasonData", required: false, type: .string), 
            AWSShapeMember(label: "StateUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum)
        ]

        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let alarmActions: [String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmArn: String?
        /// The time stamp of the last update to the alarm configuration.
        public let alarmConfigurationUpdatedTimestamp: TimeStamp?
        /// The description of the alarm.
        public let alarmDescription: String?
        /// The name of the alarm.
        public let alarmName: String?
        /// The rule that this alarm uses to evaluate its alarm state.
        public let alarmRule: String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let insufficientDataActions: [String]?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let oKActions: [String]?
        /// An explanation for the alarm state, in text format.
        public let stateReason: String?
        /// An explanation for the alarm state, in JSON format.
        public let stateReasonData: String?
        /// The time stamp of the last update to the alarm state.
        public let stateUpdatedTimestamp: TimeStamp?
        /// The state value for the alarm.
        public let stateValue: StateValue?

        public init(actionsEnabled: Bool? = nil, alarmActions: [String]? = nil, alarmArn: String? = nil, alarmConfigurationUpdatedTimestamp: TimeStamp? = nil, alarmDescription: String? = nil, alarmName: String? = nil, alarmRule: String? = nil, insufficientDataActions: [String]? = nil, oKActions: [String]? = nil, stateReason: String? = nil, stateReasonData: String? = nil, stateUpdatedTimestamp: TimeStamp? = nil, stateValue: StateValue? = nil) {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.oKActions = oKActions
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
        }

        private enum CodingKeys: String, CodingKey {
            case actionsEnabled = "ActionsEnabled"
            case alarmActions = "AlarmActions"
            case alarmArn = "AlarmArn"
            case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
            case alarmDescription = "AlarmDescription"
            case alarmName = "AlarmName"
            case alarmRule = "AlarmRule"
            case insufficientDataActions = "InsufficientDataActions"
            case oKActions = "OKActions"
            case stateReason = "StateReason"
            case stateReasonData = "StateReasonData"
            case stateUpdatedTimestamp = "StateUpdatedTimestamp"
            case stateValue = "StateValue"
        }
    }

    public struct DashboardEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardArn", required: false, type: .string), 
            AWSShapeMember(label: "DashboardName", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .long)
        ]

        /// The Amazon Resource Name (ARN) of the dashboard.
        public let dashboardArn: String?
        /// The name of the dashboard.
        public let dashboardName: String?
        /// The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let lastModified: TimeStamp?
        /// The size of the dashboard, in bytes.
        public let size: Int64?

        public init(dashboardArn: String? = nil, dashboardName: String? = nil, lastModified: TimeStamp? = nil, size: Int64? = nil) {
            self.dashboardArn = dashboardArn
            self.dashboardName = dashboardName
            self.lastModified = lastModified
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardArn = "DashboardArn"
            case dashboardName = "DashboardName"
            case lastModified = "LastModified"
            case size = "Size"
        }
    }

    public struct DashboardValidationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataPath", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The data path related to the message.
        public let dataPath: String?
        /// A message describing the error or warning.
        public let message: String?

        public init(dataPath: String? = nil, message: String? = nil) {
            self.dataPath = dataPath
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case dataPath = "DataPath"
            case message = "Message"
        }
    }

    public struct Datapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Average", required: false, type: .double), 
            AWSShapeMember(label: "ExtendedStatistics", required: false, type: .map, encoding: .map(entry:"entry", key: "key", value: "value")), 
            AWSShapeMember(label: "Maximum", required: false, type: .double), 
            AWSShapeMember(label: "Minimum", required: false, type: .double), 
            AWSShapeMember(label: "SampleCount", required: false, type: .double), 
            AWSShapeMember(label: "Sum", required: false, type: .double), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// The average of the metric values that correspond to the data point.
        public let average: Double?
        /// The percentile statistic for the data point.
        public let extendedStatistics: [String: Double]?
        /// The maximum metric value for the data point.
        public let maximum: Double?
        /// The minimum metric value for the data point.
        public let minimum: Double?
        /// The number of metric values that contributed to the aggregate value of this data point.
        public let sampleCount: Double?
        /// The sum of the metric values for the data point.
        public let sum: Double?
        /// The time stamp used for the data point.
        public let timestamp: TimeStamp?
        /// The standard unit for the data point.
        public let unit: StandardUnit?

        public init(average: Double? = nil, extendedStatistics: [String: Double]? = nil, maximum: Double? = nil, minimum: Double? = nil, sampleCount: Double? = nil, sum: Double? = nil, timestamp: TimeStamp? = nil, unit: StandardUnit? = nil) {
            self.average = average
            self.extendedStatistics = extendedStatistics
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case average = "Average"
            case extendedStatistics = "ExtendedStatistics"
            case maximum = "Maximum"
            case minimum = "Minimum"
            case sampleCount = "SampleCount"
            case sum = "Sum"
            case timestamp = "Timestamp"
            case unit = "Unit"
        }
    }

    public struct DeleteAlarmsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The alarms to be deleted.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public func validate(name: String) throws {
            try self.alarmNames.forEach {
                try validate($0, name: "alarmNames[]", parent: name, max: 255)
                try validate($0, name: "alarmNames[]", parent: name, min: 1)
            }
            try validate(self.alarmNames, name:"alarmNames", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct DeleteAnomalyDetectorInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Stat", required: true, type: .string)
        ]

        /// The metric dimensions associated with the anomaly detection model to delete.
        public let dimensions: [Dimension]?
        /// The metric name associated with the anomaly detection model to delete.
        public let metricName: String
        /// The namespace associated with the anomaly detection model to delete.
        public let namespace: String
        /// The statistic associated with the anomaly detection model to delete.
        public let stat: String

        public init(dimensions: [Dimension]? = nil, metricName: String, namespace: String, stat: String) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
            try validate(self.stat, name:"stat", parent: name, pattern: "(SampleCount|Average|Sum|Minimum|Maximum|p(\\d{1,2}|100)(\\.\\d{0,2})?|[ou]\\d+(\\.\\d*)?)(_E|_L|_H)?")
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case stat = "Stat"
        }
    }

    public struct DeleteAnomalyDetectorOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteDashboardsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The dashboards to be deleted. This parameter is required.
        public let dashboardNames: [String]

        public init(dashboardNames: [String]) {
            self.dashboardNames = dashboardNames
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardNames = "DashboardNames"
        }
    }

    public struct DeleteDashboardsOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteInsightRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// An array of the rule names to delete. If you need to find out the names of your rules, use DescribeInsightRules.
        public let ruleNames: [String]

        public init(ruleNames: [String]) {
            self.ruleNames = ruleNames
        }

        public func validate(name: String) throws {
            try self.ruleNames.forEach {
                try validate($0, name: "ruleNames[]", parent: name, max: 128)
                try validate($0, name: "ruleNames[]", parent: name, min: 1)
                try validate($0, name: "ruleNames[]", parent: name, pattern: "[\\x20-\\x7E]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ruleNames = "RuleNames"
        }
    }

    public struct DeleteInsightRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Failures", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// An array listing the rules that could not be deleted. You cannot delete built-in rules.
        public let failures: [PartialFailure]?

        public init(failures: [PartialFailure]? = nil) {
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "Failures"
        }
    }

    public struct DescribeAlarmHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "AlarmTypes", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "HistoryItemType", required: false, type: .enum), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScanBy", required: false, type: .enum), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp)
        ]

        /// The name of the alarm.
        public let alarmName: String?
        /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
        public let alarmTypes: [AlarmType]?
        /// The ending date to retrieve alarm history.
        public let endDate: TimeStamp?
        /// The type of alarm histories to retrieve.
        public let historyItemType: HistoryItemType?
        /// The maximum number of alarm history records to retrieve.
        public let maxRecords: Int?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// Specified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest event history returned first, and specify TimestampAscending to have the oldest history returned first.
        public let scanBy: ScanBy?
        /// The starting date to retrieve alarm history.
        public let startDate: TimeStamp?

        public init(alarmName: String? = nil, alarmTypes: [AlarmType]? = nil, endDate: TimeStamp? = nil, historyItemType: HistoryItemType? = nil, maxRecords: Int? = nil, nextToken: String? = nil, scanBy: ScanBy? = nil, startDate: TimeStamp? = nil) {
            self.alarmName = alarmName
            self.alarmTypes = alarmTypes
            self.endDate = endDate
            self.historyItemType = historyItemType
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.scanBy = scanBy
            self.startDate = startDate
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, max: 255)
            try validate(self.alarmName, name:"alarmName", parent: name, min: 1)
            try validate(self.maxRecords, name:"maxRecords", parent: name, max: 100)
            try validate(self.maxRecords, name:"maxRecords", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case alarmTypes = "AlarmTypes"
            case endDate = "EndDate"
            case historyItemType = "HistoryItemType"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case scanBy = "ScanBy"
            case startDate = "StartDate"
        }
    }

    public struct DescribeAlarmHistoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmHistoryItems", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The alarm histories, in JSON format.
        public let alarmHistoryItems: [AlarmHistoryItem]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(alarmHistoryItems: [AlarmHistoryItem]? = nil, nextToken: String? = nil) {
            self.alarmHistoryItems = alarmHistoryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case alarmHistoryItems = "AlarmHistoryItems"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAlarmsForMetricInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.
        public let dimensions: [Dimension]?
        /// The percentile statistic for the metric. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int?
        /// The statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics.
        public let statistic: Statistic?
        /// The unit for the metric.
        public let unit: StandardUnit?

        public init(dimensions: [Dimension]? = nil, extendedStatistic: String? = nil, metricName: String, namespace: String, period: Int? = nil, statistic: Statistic? = nil, unit: StandardUnit? = nil) {
            self.dimensions = dimensions
            self.extendedStatistic = extendedStatistic
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.unit = unit
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.extendedStatistic, name:"extendedStatistic", parent: name, pattern: "p(\\d{1,2}(\\.\\d{0,2})?|100)")
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
            try validate(self.period, name:"period", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case extendedStatistic = "ExtendedStatistic"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case period = "Period"
            case statistic = "Statistic"
            case unit = "Unit"
        }
    }

    public struct DescribeAlarmsForMetricOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricAlarms", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The information for each alarm with the specified metric.
        public let metricAlarms: [MetricAlarm]?

        public init(metricAlarms: [MetricAlarm]? = nil) {
            self.metricAlarms = metricAlarms
        }

        private enum CodingKeys: String, CodingKey {
            case metricAlarms = "MetricAlarms"
        }
    }

    public struct DescribeAlarmsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionPrefix", required: false, type: .string), 
            AWSShapeMember(label: "AlarmNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "AlarmNames", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "AlarmTypes", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "ChildrenOfAlarmName", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParentsOfAlarmName", required: false, type: .string), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum)
        ]

        /// Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.
        public let actionPrefix: String?
        /// An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix. If this parameter is specified, you cannot specify AlarmNames.
        public let alarmNamePrefix: String?
        /// The names of the alarms to retrieve information about.
        public let alarmNames: [String]?
        /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
        public let alarmTypes: [AlarmType]?
        /// If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the AlarmRule field of the composite alarm that you specify in ChildrenOfAlarmName. Information about the composite alarm that you name in ChildrenOfAlarmName is not returned. If you specify ChildrenOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you will receive a validation error.  Only the Alarm Name, ARN, StateValue (OK/ALARM/INSUFFICIENT_DATA), and StateUpdatedTimestamp information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter. 
        public let childrenOfAlarmName: String?
        /// The maximum number of alarm descriptions to retrieve.
        public let maxRecords: Int?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have AlarmRule parameters that reference the alarm named in ParentsOfAlarmName. Information about the alarm that you specify in ParentsOfAlarmName is not returned. If you specify ParentsOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you will receive a validation error.  Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter. 
        public let parentsOfAlarmName: String?
        /// Specify this parameter to receive information only about alarms that are currently in the state that you specify.
        public let stateValue: StateValue?

        public init(actionPrefix: String? = nil, alarmNamePrefix: String? = nil, alarmNames: [String]? = nil, alarmTypes: [AlarmType]? = nil, childrenOfAlarmName: String? = nil, maxRecords: Int? = nil, nextToken: String? = nil, parentsOfAlarmName: String? = nil, stateValue: StateValue? = nil) {
            self.actionPrefix = actionPrefix
            self.alarmNamePrefix = alarmNamePrefix
            self.alarmNames = alarmNames
            self.alarmTypes = alarmTypes
            self.childrenOfAlarmName = childrenOfAlarmName
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.parentsOfAlarmName = parentsOfAlarmName
            self.stateValue = stateValue
        }

        public func validate(name: String) throws {
            try validate(self.actionPrefix, name:"actionPrefix", parent: name, max: 1024)
            try validate(self.actionPrefix, name:"actionPrefix", parent: name, min: 1)
            try validate(self.alarmNamePrefix, name:"alarmNamePrefix", parent: name, max: 255)
            try validate(self.alarmNamePrefix, name:"alarmNamePrefix", parent: name, min: 1)
            try self.alarmNames?.forEach {
                try validate($0, name: "alarmNames[]", parent: name, max: 255)
                try validate($0, name: "alarmNames[]", parent: name, min: 1)
            }
            try validate(self.alarmNames, name:"alarmNames", parent: name, max: 100)
            try validate(self.childrenOfAlarmName, name:"childrenOfAlarmName", parent: name, max: 255)
            try validate(self.childrenOfAlarmName, name:"childrenOfAlarmName", parent: name, min: 1)
            try validate(self.maxRecords, name:"maxRecords", parent: name, max: 100)
            try validate(self.maxRecords, name:"maxRecords", parent: name, min: 1)
            try validate(self.parentsOfAlarmName, name:"parentsOfAlarmName", parent: name, max: 255)
            try validate(self.parentsOfAlarmName, name:"parentsOfAlarmName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actionPrefix = "ActionPrefix"
            case alarmNamePrefix = "AlarmNamePrefix"
            case alarmNames = "AlarmNames"
            case alarmTypes = "AlarmTypes"
            case childrenOfAlarmName = "ChildrenOfAlarmName"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case parentsOfAlarmName = "ParentsOfAlarmName"
            case stateValue = "StateValue"
        }
    }

    public struct DescribeAlarmsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompositeAlarms", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricAlarms", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The information about any composite alarms returned by the operation.
        public let compositeAlarms: [CompositeAlarm]?
        /// The information about any metric alarms returned by the operation.
        public let metricAlarms: [MetricAlarm]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(compositeAlarms: [CompositeAlarm]? = nil, metricAlarms: [MetricAlarm]? = nil, nextToken: String? = nil) {
            self.compositeAlarms = compositeAlarms
            self.metricAlarms = metricAlarms
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case compositeAlarms = "CompositeAlarms"
            case metricAlarms = "MetricAlarms"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAnomalyDetectorsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they're all returned.
        public let dimensions: [Dimension]?
        /// The maximum number of results to return in one operation. The maximum value that you can specify is 100. To retrieve the remaining results, make another call with the returned NextToken value. 
        public let maxResults: Int?
        /// Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they're all returned.
        public let metricName: String?
        /// Limits the results to only the anomaly detection models that are associated with the specified namespace.
        public let namespace: String?
        /// Use the token returned by the previous operation to request the next page of results.
        public let nextToken: String?

        public init(dimensions: [Dimension]? = nil, maxResults: Int? = nil, metricName: String? = nil, namespace: String? = nil, nextToken: String? = nil) {
            self.dimensions = dimensions
            self.maxResults = maxResults
            self.metricName = metricName
            self.namespace = namespace
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case maxResults = "MaxResults"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAnomalyDetectorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnomalyDetectors", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The list of anomaly detection models returned by the operation.
        public let anomalyDetectors: [AnomalyDetector]?
        /// A token that you can use in a subsequent operation to retrieve the next set of results.
        public let nextToken: String?

        public init(anomalyDetectors: [AnomalyDetector]? = nil, nextToken: String? = nil) {
            self.anomalyDetectors = anomalyDetectors
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case anomalyDetectors = "AnomalyDetectors"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInsightRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// This parameter is not currently used. Reserved for future use. If it is used in the future, the maximum value may be different.
        public let maxResults: Int?
        /// Reserved for future use.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInsightRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightRules", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The rules returned by the operation.
        public let insightRules: [InsightRule]?
        /// Reserved for future use.
        public let nextToken: String?

        public init(insightRules: [InsightRule]? = nil, nextToken: String? = nil) {
            self.insightRules = insightRules
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case insightRules = "InsightRules"
            case nextToken = "NextToken"
        }
    }

    public struct Dimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// The name of the dimension.
        public let name: String
        /// The value representing the dimension measurement.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 255)
            try validate(self.value, name:"value", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DimensionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The dimension name to be matched.
        public let name: String
        /// The value of the dimension to be matched.
        public let value: String?

        public init(name: String, value: String? = nil) {
            self.name = name
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 255)
            try validate(self.value, name:"value", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DisableAlarmActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public func validate(name: String) throws {
            try self.alarmNames.forEach {
                try validate($0, name: "alarmNames[]", parent: name, max: 255)
                try validate($0, name: "alarmNames[]", parent: name, min: 1)
            }
            try validate(self.alarmNames, name:"alarmNames", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct DisableInsightRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// An array of the rule names to disable. If you need to find out the names of your rules, use DescribeInsightRules.
        public let ruleNames: [String]

        public init(ruleNames: [String]) {
            self.ruleNames = ruleNames
        }

        public func validate(name: String) throws {
            try self.ruleNames.forEach {
                try validate($0, name: "ruleNames[]", parent: name, max: 128)
                try validate($0, name: "ruleNames[]", parent: name, min: 1)
                try validate($0, name: "ruleNames[]", parent: name, pattern: "[\\x20-\\x7E]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ruleNames = "RuleNames"
        }
    }

    public struct DisableInsightRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Failures", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// An array listing the rules that could not be disabled. You cannot disable built-in rules.
        public let failures: [PartialFailure]?

        public init(failures: [PartialFailure]? = nil) {
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "Failures"
        }
    }

    public struct EnableAlarmActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public func validate(name: String) throws {
            try self.alarmNames.forEach {
                try validate($0, name: "alarmNames[]", parent: name, max: 255)
                try validate($0, name: "alarmNames[]", parent: name, min: 1)
            }
            try validate(self.alarmNames, name:"alarmNames", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct EnableInsightRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleNames", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// An array of the rule names to enable. If you need to find out the names of your rules, use DescribeInsightRules.
        public let ruleNames: [String]

        public init(ruleNames: [String]) {
            self.ruleNames = ruleNames
        }

        public func validate(name: String) throws {
            try self.ruleNames.forEach {
                try validate($0, name: "ruleNames[]", parent: name, max: 128)
                try validate($0, name: "ruleNames[]", parent: name, min: 1)
                try validate($0, name: "ruleNames[]", parent: name, pattern: "[\\x20-\\x7E]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ruleNames = "RuleNames"
        }
    }

    public struct EnableInsightRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Failures", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.
        public let failures: [PartialFailure]?

        public init(failures: [PartialFailure]? = nil) {
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "Failures"
        }
    }

    public struct GetDashboardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardName", required: true, type: .string)
        ]

        /// The name of the dashboard to be described.
        public let dashboardName: String

        public init(dashboardName: String) {
            self.dashboardName = dashboardName
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardName = "DashboardName"
        }
    }

    public struct GetDashboardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardArn", required: false, type: .string), 
            AWSShapeMember(label: "DashboardBody", required: false, type: .string), 
            AWSShapeMember(label: "DashboardName", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the dashboard.
        public let dashboardArn: String?
        /// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. For more information about the DashboardBody syntax, see Dashboard Body Structure and Syntax. 
        public let dashboardBody: String?
        /// The name of the dashboard.
        public let dashboardName: String?

        public init(dashboardArn: String? = nil, dashboardBody: String? = nil, dashboardName: String? = nil) {
            self.dashboardArn = dashboardArn
            self.dashboardBody = dashboardBody
            self.dashboardName = dashboardName
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardArn = "DashboardArn"
            case dashboardBody = "DashboardBody"
            case dashboardName = "DashboardName"
        }
    }

    public struct GetInsightRuleReportInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "MaxContributorCount", required: false, type: .integer), 
            AWSShapeMember(label: "Metrics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "OrderBy", required: false, type: .string), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "RuleName", required: true, type: .string), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp)
        ]

        /// The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        public let endTime: TimeStamp
        /// The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.
        public let maxContributorCount: Int?
        /// Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:    UniqueContributors -- the number of unique contributors for each data point.    MaxContributorValue -- the value of the top contributor for each data point. The identity of the contributor may change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule's Value, during that period.    SampleCount -- the number of data points matched by the rule.    Sum -- the sum of the values from all contributors during the time period represented by that data point.    Minimum -- the minimum value from a single observation during the time period represented by that data point.    Maximum -- the maximum value from a single observation during the time period represented by that data point.    Average -- the average value from all contributors during the time period represented by that data point.  
        public let metrics: [String]?
        /// Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.
        public let orderBy: String?
        /// The period, in seconds, to use for the statistics in the InsightRuleMetricDatapoint results.
        public let period: Int
        /// The name of the rule that you want to see data from.
        public let ruleName: String
        /// The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        public let startTime: TimeStamp

        public init(endTime: TimeStamp, maxContributorCount: Int? = nil, metrics: [String]? = nil, orderBy: String? = nil, period: Int, ruleName: String, startTime: TimeStamp) {
            self.endTime = endTime
            self.maxContributorCount = maxContributorCount
            self.metrics = metrics
            self.orderBy = orderBy
            self.period = period
            self.ruleName = ruleName
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.metrics?.forEach {
                try validate($0, name: "metrics[]", parent: name, max: 32)
                try validate($0, name: "metrics[]", parent: name, min: 1)
                try validate($0, name: "metrics[]", parent: name, pattern: "[\\x20-\\x7E]+")
            }
            try validate(self.orderBy, name:"orderBy", parent: name, max: 32)
            try validate(self.orderBy, name:"orderBy", parent: name, min: 1)
            try validate(self.orderBy, name:"orderBy", parent: name, pattern: "[\\x20-\\x7E]+")
            try validate(self.period, name:"period", parent: name, min: 1)
            try validate(self.ruleName, name:"ruleName", parent: name, max: 128)
            try validate(self.ruleName, name:"ruleName", parent: name, min: 1)
            try validate(self.ruleName, name:"ruleName", parent: name, pattern: "[\\x20-\\x7E]+")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case maxContributorCount = "MaxContributorCount"
            case metrics = "Metrics"
            case orderBy = "OrderBy"
            case period = "Period"
            case ruleName = "RuleName"
            case startTime = "StartTime"
        }
    }

    public struct GetInsightRuleReportOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AggregateValue", required: false, type: .double), 
            AWSShapeMember(label: "AggregationStatistic", required: false, type: .string), 
            AWSShapeMember(label: "ApproximateUniqueCount", required: false, type: .long), 
            AWSShapeMember(label: "Contributors", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "KeyLabels", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricDatapoints", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The sum of the values from all individual contributors that match the rule.
        public let aggregateValue: Double?
        /// Specifies whether this rule aggregates contributor data by COUNT or SUM.
        public let aggregationStatistic: String?
        /// An approximate count of the unique contributors found by this rule in this time period.
        public let approximateUniqueCount: Int64?
        /// An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values for the keys counts as a unique contributor.
        public let contributors: [InsightRuleContributor]?
        /// An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors. If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.
        public let keyLabels: [String]?
        /// A time series of metric data points that matches the time period in the rule request.
        public let metricDatapoints: [InsightRuleMetricDatapoint]?

        public init(aggregateValue: Double? = nil, aggregationStatistic: String? = nil, approximateUniqueCount: Int64? = nil, contributors: [InsightRuleContributor]? = nil, keyLabels: [String]? = nil, metricDatapoints: [InsightRuleMetricDatapoint]? = nil) {
            self.aggregateValue = aggregateValue
            self.aggregationStatistic = aggregationStatistic
            self.approximateUniqueCount = approximateUniqueCount
            self.contributors = contributors
            self.keyLabels = keyLabels
            self.metricDatapoints = metricDatapoints
        }

        private enum CodingKeys: String, CodingKey {
            case aggregateValue = "AggregateValue"
            case aggregationStatistic = "AggregationStatistic"
            case approximateUniqueCount = "ApproximateUniqueCount"
            case contributors = "Contributors"
            case keyLabels = "KeyLabels"
            case metricDatapoints = "MetricDatapoints"
        }
    }

    public struct GetMetricDataInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "MaxDatapoints", required: false, type: .integer), 
            AWSShapeMember(label: "MetricDataQueries", required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScanBy", required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp)
        ]

        /// The time stamp indicating the latest data to be returned. The value specified is exclusive; results include data points up to the specified time stamp. For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as EndTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the EndTime.
        public let endTime: TimeStamp
        /// The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.
        public let maxDatapoints: Int?
        /// The metric queries to be returned. A single GetMetricData call can include as many as 500 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. 
        public let metricDataQueries: [MetricDataQuery]
        /// Include this value, if it was returned by the previous call, to get the next set of data points.
        public let nextToken: String?
        /// The order in which data points should be returned. TimestampDescending returns the newest data first and paginates when the MaxDatapoints limit is reached. TimestampAscending returns the oldest data first and paginates when the MaxDatapoints limit is reached.
        public let scanBy: ScanBy?
        /// The time stamp indicating the earliest data to be returned. The value specified is inclusive; results include data points with the specified time stamp.  CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.   Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.   Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.   If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15.  For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as StartTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the StartTime.
        public let startTime: TimeStamp

        public init(endTime: TimeStamp, maxDatapoints: Int? = nil, metricDataQueries: [MetricDataQuery], nextToken: String? = nil, scanBy: ScanBy? = nil, startTime: TimeStamp) {
            self.endTime = endTime
            self.maxDatapoints = maxDatapoints
            self.metricDataQueries = metricDataQueries
            self.nextToken = nextToken
            self.scanBy = scanBy
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.metricDataQueries.forEach {
                try $0.validate(name: "\(name).metricDataQueries[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case maxDatapoints = "MaxDatapoints"
            case metricDataQueries = "MetricDataQueries"
            case nextToken = "NextToken"
            case scanBy = "ScanBy"
            case startTime = "StartTime"
        }
    }

    public struct GetMetricDataOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Messages", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricDataResults", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Contains a message about this GetMetricData operation, if the operation results in such a message. An example of a message that may be returned is Maximum number of allowed metrics exceeded. If there is a message, as much of the operation as possible is still executed. A message appears here only if it is related to the global GetMetricData operation. Any message about a specific metric returned by the operation appears in the MetricDataResult object returned for that metric.
        public let messages: [MessageData]?
        /// The metrics that are returned, including the metric name, namespace, and dimensions.
        public let metricDataResults: [MetricDataResult]?
        /// A token that marks the next batch of returned results.
        public let nextToken: String?

        public init(messages: [MessageData]? = nil, metricDataResults: [MetricDataResult]? = nil, nextToken: String? = nil) {
            self.messages = messages
            self.metricDataResults = metricDataResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "Messages"
            case metricDataResults = "MetricDataResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetMetricStatisticsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ExtendedStatistics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Statistics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can't retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see Dimension Combinations in the Amazon CloudWatch User Guide. For more information about specifying dimensions, see Publishing Metrics in the Amazon CloudWatch User Guide.
        public let dimensions: [Dimension]?
        /// The time stamp that determines the last data point to return. The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).
        public let endTime: TimeStamp
        /// The percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers.
        public let extendedStatistics: [String]?
        /// The name of the metric, with or without spaces.
        public let metricName: String
        /// The namespace of the metric, with or without spaces.
        public let namespace: String
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:   Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).   Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).   Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).  
        public let period: Int
        /// The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request. The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z). CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.   Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.   Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.   If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. 
        public let startTime: TimeStamp
        /// The metric statistics, other than percentile. For percentile statistics, use ExtendedStatistics. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both.
        public let statistics: [Statistic]?
        /// The unit for a given metric. If you omit Unit, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
        public let unit: StandardUnit?

        public init(dimensions: [Dimension]? = nil, endTime: TimeStamp, extendedStatistics: [String]? = nil, metricName: String, namespace: String, period: Int, startTime: TimeStamp, statistics: [Statistic]? = nil, unit: StandardUnit? = nil) {
            self.dimensions = dimensions
            self.endTime = endTime
            self.extendedStatistics = extendedStatistics
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.startTime = startTime
            self.statistics = statistics
            self.unit = unit
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try self.extendedStatistics?.forEach {
                try validate($0, name: "extendedStatistics[]", parent: name, pattern: "p(\\d{1,2}(\\.\\d{0,2})?|100)")
            }
            try validate(self.extendedStatistics, name:"extendedStatistics", parent: name, max: 10)
            try validate(self.extendedStatistics, name:"extendedStatistics", parent: name, min: 1)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
            try validate(self.period, name:"period", parent: name, min: 1)
            try validate(self.statistics, name:"statistics", parent: name, max: 5)
            try validate(self.statistics, name:"statistics", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case endTime = "EndTime"
            case extendedStatistics = "ExtendedStatistics"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case period = "Period"
            case startTime = "StartTime"
            case statistics = "Statistics"
            case unit = "Unit"
        }
    }

    public struct GetMetricStatisticsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Datapoints", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]

        /// The data points for the specified metric.
        public let datapoints: [Datapoint]?
        /// A label for the specified metric.
        public let label: String?

        public init(datapoints: [Datapoint]? = nil, label: String? = nil) {
            self.datapoints = datapoints
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case datapoints = "Datapoints"
            case label = "Label"
        }
    }

    public struct GetMetricWidgetImageInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricWidget", required: true, type: .string), 
            AWSShapeMember(label: "OutputFormat", required: false, type: .string)
        ]

        /// A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one MetricWidget parameter in each GetMetricWidgetImage call. For more information about the syntax of MetricWidget see GetMetricWidgetImage: Metric Widget Structure and Syntax. If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.
        public let metricWidget: String
        /// The format of the resulting image. Only PNG images are supported. The default is png. If you specify png, the API returns an HTTP response with the content-type set to text/xml. The image data is in a MetricWidgetImage field. For example:   &lt;GetMetricWidgetImageResponse xmlns=&lt;URLstring&gt;&gt;    &lt;GetMetricWidgetImageResult&gt;    &lt;MetricWidgetImage&gt;    iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...    &lt;/MetricWidgetImage&gt;    &lt;/GetMetricWidgetImageResult&gt;    &lt;ResponseMetadata&gt;    &lt;RequestId&gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&lt;/RequestId&gt;    &lt;/ResponseMetadata&gt;   &lt;/GetMetricWidgetImageResponse&gt;  The image/png setting is intended only for custom HTTP requests. For most use cases, and all actions using an AWS SDK, you should use png. If you specify image/png, the HTTP response has a content-type set to image/png, and the body of the response is a PNG image. 
        public let outputFormat: String?

        public init(metricWidget: String, outputFormat: String? = nil) {
            self.metricWidget = metricWidget
            self.outputFormat = outputFormat
        }

        private enum CodingKeys: String, CodingKey {
            case metricWidget = "MetricWidget"
            case outputFormat = "OutputFormat"
        }
    }

    public struct GetMetricWidgetImageOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricWidgetImage", required: false, type: .blob)
        ]

        /// The image of the graph, in the output format specified.
        public let metricWidgetImage: Data?

        public init(metricWidgetImage: Data? = nil) {
            self.metricWidgetImage = metricWidgetImage
        }

        private enum CodingKeys: String, CodingKey {
            case metricWidgetImage = "MetricWidgetImage"
        }
    }

    public struct InsightRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definition", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Schema", required: true, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .string)
        ]

        /// The definition of the rule, as a JSON object. The definition contains the keywords used to define contributors, the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see Contributor Insights Rule Syntax.
        public let definition: String
        /// The name of the rule.
        public let name: String
        /// For rules that you create, this is always {"Name": "CloudWatchLogRule", "Version": 1}. For built-in rules, this is {"Name": "ServiceLogRule", "Version": 1} 
        public let schema: String
        /// Indicates whether the rule is enabled or disabled.
        public let state: String

        public init(definition: String, name: String, schema: String, state: String) {
            self.definition = definition
            self.name = name
            self.schema = schema
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case name = "Name"
            case schema = "Schema"
            case state = "State"
        }
    }

    public struct InsightRuleContributor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApproximateAggregateValue", required: true, type: .double), 
            AWSShapeMember(label: "Datapoints", required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Keys", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// An approximation of the aggregate value that comes from this contributor.
        public let approximateAggregateValue: Double
        /// An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.
        public let datapoints: [InsightRuleContributorDatapoint]
        /// One of the log entry field keywords that is used to define contributors for this rule.
        public let keys: [String]

        public init(approximateAggregateValue: Double, datapoints: [InsightRuleContributorDatapoint], keys: [String]) {
            self.approximateAggregateValue = approximateAggregateValue
            self.datapoints = datapoints
            self.keys = keys
        }

        private enum CodingKeys: String, CodingKey {
            case approximateAggregateValue = "ApproximateAggregateValue"
            case datapoints = "Datapoints"
            case keys = "Keys"
        }
    }

    public struct InsightRuleContributorDatapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApproximateValue", required: true, type: .double), 
            AWSShapeMember(label: "Timestamp", required: true, type: .timestamp)
        ]

        /// The approximate value that this contributor added during this timestamp.
        public let approximateValue: Double
        /// The timestamp of the data point.
        public let timestamp: TimeStamp

        public init(approximateValue: Double, timestamp: TimeStamp) {
            self.approximateValue = approximateValue
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case approximateValue = "ApproximateValue"
            case timestamp = "Timestamp"
        }
    }

    public struct InsightRuleMetricDatapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Average", required: false, type: .double), 
            AWSShapeMember(label: "MaxContributorValue", required: false, type: .double), 
            AWSShapeMember(label: "Maximum", required: false, type: .double), 
            AWSShapeMember(label: "Minimum", required: false, type: .double), 
            AWSShapeMember(label: "SampleCount", required: false, type: .double), 
            AWSShapeMember(label: "Sum", required: false, type: .double), 
            AWSShapeMember(label: "Timestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "UniqueContributors", required: false, type: .double)
        ]

        /// The average value from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public let average: Double?
        /// The maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately, so the identity of the max contributor could be different for each timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public let maxContributorValue: Double?
        /// The maximum value from a single occurence from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public let maximum: Double?
        /// The minimum value from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public let minimum: Double?
        /// The number of occurrences that matched the rule during this data point. This statistic is returned only if you included it in the Metrics array in your request.
        public let sampleCount: Double?
        /// The sum of the values from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public let sum: Double?
        /// The timestamp of the data point.
        public let timestamp: TimeStamp
        /// The number of unique contributors who published data during this timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public let uniqueContributors: Double?

        public init(average: Double? = nil, maxContributorValue: Double? = nil, maximum: Double? = nil, minimum: Double? = nil, sampleCount: Double? = nil, sum: Double? = nil, timestamp: TimeStamp, uniqueContributors: Double? = nil) {
            self.average = average
            self.maxContributorValue = maxContributorValue
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.uniqueContributors = uniqueContributors
        }

        private enum CodingKeys: String, CodingKey {
            case average = "Average"
            case maxContributorValue = "MaxContributorValue"
            case maximum = "Maximum"
            case minimum = "Minimum"
            case sampleCount = "SampleCount"
            case sum = "Sum"
            case timestamp = "Timestamp"
            case uniqueContributors = "UniqueContributors"
        }
    }

    public struct ListDashboardsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". 
        public let dashboardNamePrefix: String?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?

        public init(dashboardNamePrefix: String? = nil, nextToken: String? = nil) {
            self.dashboardNamePrefix = dashboardNamePrefix
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardNamePrefix = "DashboardNamePrefix"
            case nextToken = "NextToken"
        }
    }

    public struct ListDashboardsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardEntries", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The list of matching dashboards.
        public let dashboardEntries: [DashboardEntry]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(dashboardEntries: [DashboardEntry]? = nil, nextToken: String? = nil) {
            self.dashboardEntries = dashboardEntries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardEntries = "DashboardEntries"
            case nextToken = "NextToken"
        }
    }

    public struct ListMetricsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The dimensions to filter against.
        public let dimensions: [DimensionFilter]?
        /// The name of the metric to filter against.
        public let metricName: String?
        /// The namespace to filter against.
        public let namespace: String?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?

        public init(dimensions: [DimensionFilter]? = nil, metricName: String? = nil, namespace: String? = nil, nextToken: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case nextToken = "NextToken"
        }
    }

    public struct ListMetricsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metrics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The metrics.
        public let metrics: [Metric]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(metrics: [Metric]? = nil, nextToken: String? = nil) {
            self.metrics = metrics
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case metrics = "Metrics"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]

        /// The ARN of the CloudWatch resource that you want to view tags for. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name   The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name   For more information on ARN format, see  Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 1024)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The list of tag keys and values associated with the resource you specified.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct MessageData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The error code or status code associated with the message.
        public let code: String?
        /// The message text.
        public let value: String?

        public init(code: String? = nil, value: String? = nil) {
            self.code = code
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case value = "Value"
        }
    }

    public struct Metric: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string)
        ]

        /// The dimensions for the metric.
        public let dimensions: [Dimension]?
        /// The name of the metric. This is a required field.
        public let metricName: String?
        /// The namespace of the metric.
        public let namespace: String?

        public init(dimensions: [Dimension]? = nil, metricName: String? = nil, namespace: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
        }
    }

    public struct MetricAlarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "AlarmArn", required: false, type: .string), 
            AWSShapeMember(label: "AlarmConfigurationUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "DatapointsToAlarm", required: false, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "EvaluateLowSampleCountPercentile", required: false, type: .string), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OKActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "StateReason", required: false, type: .string), 
            AWSShapeMember(label: "StateReasonData", required: false, type: .string), 
            AWSShapeMember(label: "StateUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Threshold", required: false, type: .double), 
            AWSShapeMember(label: "ThresholdMetricId", required: false, type: .string), 
            AWSShapeMember(label: "TreatMissingData", required: false, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let alarmActions: [String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmArn: String?
        /// The time stamp of the last update to the alarm configuration.
        public let alarmConfigurationUpdatedTimestamp: TimeStamp?
        /// The description of the alarm.
        public let alarmDescription: String?
        /// The name of the alarm.
        public let alarmName: String?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator?
        /// The number of data points that must be breaching to trigger the alarm.
        public let datapointsToAlarm: Int?
        /// The dimensions for the metric associated with the alarm.
        public let dimensions: [Dimension]?
        /// Used only for alarms based on percentiles. If ignore, the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
        public let evaluateLowSampleCountPercentile: String?
        /// The number of periods over which data is compared to the specified threshold.
        public let evaluationPeriods: Int?
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let insufficientDataActions: [String]?
        /// The name of the metric associated with the alarm, if this is an alarm based on a single metric.
        public let metricName: String?
        /// An array of MetricDataQuery structures, used in an alarm based on a metric math expression. Each structure either retrieves a metric or performs a math expression. One item in the Metrics array is the math expression that the alarm watches. This expression by designated by having ReturnValue set to true.
        public let metrics: [MetricDataQuery]?
        /// The namespace of the metric associated with the alarm.
        public let namespace: String?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let oKActions: [String]?
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int?
        /// An explanation for the alarm state, in text format.
        public let stateReason: String?
        /// An explanation for the alarm state, in JSON format.
        public let stateReasonData: String?
        /// The time stamp of the last update to the alarm state.
        public let stateUpdatedTimestamp: TimeStamp?
        /// The state value for the alarm.
        public let stateValue: StateValue?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public let statistic: Statistic?
        /// The value to compare with the specified statistic.
        public let threshold: Double?
        /// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
        public let thresholdMetricId: String?
        /// Sets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of missing is used.
        public let treatMissingData: String?
        /// The unit of the metric associated with the alarm.
        public let unit: StandardUnit?

        public init(actionsEnabled: Bool? = nil, alarmActions: [String]? = nil, alarmArn: String? = nil, alarmConfigurationUpdatedTimestamp: TimeStamp? = nil, alarmDescription: String? = nil, alarmName: String? = nil, comparisonOperator: ComparisonOperator? = nil, datapointsToAlarm: Int? = nil, dimensions: [Dimension]? = nil, evaluateLowSampleCountPercentile: String? = nil, evaluationPeriods: Int? = nil, extendedStatistic: String? = nil, insufficientDataActions: [String]? = nil, metricName: String? = nil, metrics: [MetricDataQuery]? = nil, namespace: String? = nil, oKActions: [String]? = nil, period: Int? = nil, stateReason: String? = nil, stateReasonData: String? = nil, stateUpdatedTimestamp: TimeStamp? = nil, stateValue: StateValue? = nil, statistic: Statistic? = nil, threshold: Double? = nil, thresholdMetricId: String? = nil, treatMissingData: String? = nil, unit: StandardUnit? = nil) {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.oKActions = oKActions
            self.period = period
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
            self.statistic = statistic
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case actionsEnabled = "ActionsEnabled"
            case alarmActions = "AlarmActions"
            case alarmArn = "AlarmArn"
            case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
            case alarmDescription = "AlarmDescription"
            case alarmName = "AlarmName"
            case comparisonOperator = "ComparisonOperator"
            case datapointsToAlarm = "DatapointsToAlarm"
            case dimensions = "Dimensions"
            case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
            case evaluationPeriods = "EvaluationPeriods"
            case extendedStatistic = "ExtendedStatistic"
            case insufficientDataActions = "InsufficientDataActions"
            case metricName = "MetricName"
            case metrics = "Metrics"
            case namespace = "Namespace"
            case oKActions = "OKActions"
            case period = "Period"
            case stateReason = "StateReason"
            case stateReasonData = "StateReasonData"
            case stateUpdatedTimestamp = "StateUpdatedTimestamp"
            case stateValue = "StateValue"
            case statistic = "Statistic"
            case threshold = "Threshold"
            case thresholdMetricId = "ThresholdMetricId"
            case treatMissingData = "TreatMissingData"
            case unit = "Unit"
        }
    }

    public struct MetricDataQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expression", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "MetricStat", required: false, type: .structure), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "ReturnData", required: false, type: .boolean)
        ]

        /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide. Within each MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public let expression: String?
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
        public let id: String
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.
        public let label: String?
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public let metricStat: MetricStat?
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second.
        public let period: Int?
        /// When used in GetMetricData, this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False. If you omit this, the default of True is used. When used in PutMetricAlarm, specify True for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.
        public let returnData: Bool?

        public init(expression: String? = nil, id: String, label: String? = nil, metricStat: MetricStat? = nil, period: Int? = nil, returnData: Bool? = nil) {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.period = period
            self.returnData = returnData
        }

        public func validate(name: String) throws {
            try validate(self.expression, name:"expression", parent: name, max: 1024)
            try validate(self.expression, name:"expression", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, max: 255)
            try validate(self.id, name:"id", parent: name, min: 1)
            try self.metricStat?.validate(name: "\(name).metricStat")
            try validate(self.period, name:"period", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "Expression"
            case id = "Id"
            case label = "Label"
            case metricStat = "MetricStat"
            case period = "Period"
            case returnData = "ReturnData"
        }
    }

    public struct MetricDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "Messages", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "StatusCode", required: false, type: .enum), 
            AWSShapeMember(label: "Timestamps", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Values", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The short name you specified to represent this metric.
        public let id: String?
        /// The human-readable label associated with the data.
        public let label: String?
        /// A list of messages with additional information about the data returned.
        public let messages: [MessageData]?
        /// The status of the returned data. Complete indicates that all data points in the requested time range were returned. PartialData means that an incomplete set of data points were returned. You can use the NextToken value that was returned and repeat your request to get more data points. NextToken is not returned if you are performing a math expression. InternalError indicates that an error occurred. Retry your request using NextToken, if present.
        public let statusCode: StatusCode?
        /// The timestamps for the data points, formatted in Unix timestamp format. The number of timestamps always matches the number of values and the value for Timestamps[x] is Values[x].
        public let timestamps: [TimeStamp]?
        /// The data points for the metric corresponding to Timestamps. The number of values always matches the number of timestamps and the timestamp for Values[x] is Timestamps[x].
        public let values: [Double]?

        public init(id: String? = nil, label: String? = nil, messages: [MessageData]? = nil, statusCode: StatusCode? = nil, timestamps: [TimeStamp]? = nil, values: [Double]? = nil) {
            self.id = id
            self.label = label
            self.messages = messages
            self.statusCode = statusCode
            self.timestamps = timestamps
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case label = "Label"
            case messages = "Messages"
            case statusCode = "StatusCode"
            case timestamps = "Timestamps"
            case values = "Values"
        }
    }

    public struct MetricDatum: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Counts", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "StatisticValues", required: false, type: .structure), 
            AWSShapeMember(label: "StorageResolution", required: false, type: .integer), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .double), 
            AWSShapeMember(label: "Values", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Array of numbers that is used along with the Values array. Each number in the Count array is the number of times the corresponding value in the Values array occurred during the period.  If you omit the Counts array, the default of 1 is used as the value for each count. If you include a Counts array, it must include the same amount of values as the Values array.
        public let counts: [Double]?
        /// The dimensions associated with the metric.
        public let dimensions: [Dimension]?
        /// The name of the metric.
        public let metricName: String
        /// The statistical values for the metric.
        public let statisticValues: StatisticSet?
        /// Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see High-Resolution Metrics in the Amazon CloudWatch User Guide.  This field is optional, if you do not specify it the default of 60 is used.
        public let storageResolution: Int?
        /// The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: TimeStamp?
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, this displays the unit that is used for the metric.
        public let unit: StandardUnit?
        /// The value for the metric. Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public let value: Double?
        /// Array of numbers representing the values for the metric during the period. Each unique value is listed just once in this array, and the corresponding number in the Counts array specifies the number of times that value occurred during the period. You can include up to 150 unique values in each PutMetricData action that specifies a Values array. Although the Values array accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public let values: [Double]?

        public init(counts: [Double]? = nil, dimensions: [Dimension]? = nil, metricName: String, statisticValues: StatisticSet? = nil, storageResolution: Int? = nil, timestamp: TimeStamp? = nil, unit: StandardUnit? = nil, value: Double? = nil, values: [Double]? = nil) {
            self.counts = counts
            self.dimensions = dimensions
            self.metricName = metricName
            self.statisticValues = statisticValues
            self.storageResolution = storageResolution
            self.timestamp = timestamp
            self.unit = unit
            self.value = value
            self.values = values
        }

        public func validate(name: String) throws {
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.storageResolution, name:"storageResolution", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case counts = "Counts"
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case statisticValues = "StatisticValues"
            case storageResolution = "StorageResolution"
            case timestamp = "Timestamp"
            case unit = "Unit"
            case value = "Value"
            case values = "Values"
        }
    }

    public struct MetricStat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metric", required: true, type: .structure), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "Stat", required: true, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// The metric to return, including the metric name, namespace, and dimensions.
        public let metric: Metric
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:   Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).   Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).   Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).  
        public let period: Int
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic.
        public let stat: String
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
        public let unit: StandardUnit?

        public init(metric: Metric, period: Int, stat: String, unit: StandardUnit? = nil) {
            self.metric = metric
            self.period = period
            self.stat = stat
            self.unit = unit
        }

        public func validate(name: String) throws {
            try self.metric.validate(name: "\(name).metric")
            try validate(self.period, name:"period", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "Metric"
            case period = "Period"
            case stat = "Stat"
            case unit = "Unit"
        }
    }

    public struct PartialFailure: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExceptionType", required: false, type: .string), 
            AWSShapeMember(label: "FailureCode", required: false, type: .string), 
            AWSShapeMember(label: "FailureDescription", required: false, type: .string), 
            AWSShapeMember(label: "FailureResource", required: false, type: .string)
        ]

        /// The type of error.
        public let exceptionType: String?
        /// The code of the error.
        public let failureCode: String?
        /// A description of the error.
        public let failureDescription: String?
        /// The specified rule that could not be deleted.
        public let failureResource: String?

        public init(exceptionType: String? = nil, failureCode: String? = nil, failureDescription: String? = nil, failureResource: String? = nil) {
            self.exceptionType = exceptionType
            self.failureCode = failureCode
            self.failureDescription = failureDescription
            self.failureResource = failureResource
        }

        private enum CodingKeys: String, CodingKey {
            case exceptionType = "ExceptionType"
            case failureCode = "FailureCode"
            case failureDescription = "FailureDescription"
            case failureResource = "FailureResource"
        }
    }

    public struct PutAnomalyDetectorInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configuration", required: false, type: .structure), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Stat", required: true, type: .string)
        ]

        /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges. The configuration can also include the time zone to use for the metric. You can in
        public let configuration: AnomalyDetectorConfiguration?
        /// The metric dimensions to create the anomaly detection model for.
        public let dimensions: [Dimension]?
        /// The name of the metric to create the anomaly detection model for.
        public let metricName: String
        /// The namespace of the metric to create the anomaly detection model for.
        public let namespace: String
        /// The statistic to use for the metric and the anomaly detection model.
        public let stat: String

        public init(configuration: AnomalyDetectorConfiguration? = nil, dimensions: [Dimension]? = nil, metricName: String, namespace: String, stat: String) {
            self.configuration = configuration
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
        }

        public func validate(name: String) throws {
            try self.configuration?.validate(name: "\(name).configuration")
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
            try validate(self.stat, name:"stat", parent: name, pattern: "(SampleCount|Average|Sum|Minimum|Maximum|p(\\d{1,2}|100)(\\.\\d{0,2})?|[ou]\\d+(\\.\\d*)?)(_E|_L|_H)?")
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case stat = "Stat"
        }
    }

    public struct PutAnomalyDetectorOutput: AWSShape {


        public init() {
        }

    }

    public struct PutCompositeAlarmInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "AlarmName", required: true, type: .string), 
            AWSShapeMember(label: "AlarmRule", required: true, type: .string), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "OKActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is TRUE.
        public let actionsEnabled: Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name  
        public let alarmActions: [String]?
        /// The description for the composite alarm.
        public let alarmDescription: String?
        /// The name for the composite alarm. This name must be unique within your AWS account.
        public let alarmName: String
        /// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression. You can use either alarm names or ARNs to reference the other alarms that are to be evaluated. Functions can include the following:    ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM state.    OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.    INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm is in INSUFFICIENT_DATA state.    TRUE always evaluates to TRUE.    FALSE always evaluates to FALSE.   TRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions. Alarm names specified in AlarmRule can be surrounded with double-quotes ("), but do not have to be. The following are some examples of AlarmRule:    ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh) specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.    ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress) specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.    (ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh) goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.   The AlarmRule can specify as many as 100 "children" alarms. The AlarmRule expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.
        public let alarmRule: String
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name  
        public let insufficientDataActions: [String]?
        /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name  
        public let oKActions: [String]?
        /// A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.
        public let tags: [Tag]?

        public init(actionsEnabled: Bool? = nil, alarmActions: [String]? = nil, alarmDescription: String? = nil, alarmName: String, alarmRule: String, insufficientDataActions: [String]? = nil, oKActions: [String]? = nil, tags: [Tag]? = nil) {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.oKActions = oKActions
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.alarmActions?.forEach {
                try validate($0, name: "alarmActions[]", parent: name, max: 1024)
                try validate($0, name: "alarmActions[]", parent: name, min: 1)
            }
            try validate(self.alarmActions, name:"alarmActions", parent: name, max: 5)
            try validate(self.alarmDescription, name:"alarmDescription", parent: name, max: 1024)
            try validate(self.alarmDescription, name:"alarmDescription", parent: name, min: 0)
            try validate(self.alarmName, name:"alarmName", parent: name, max: 255)
            try validate(self.alarmName, name:"alarmName", parent: name, min: 1)
            try validate(self.alarmRule, name:"alarmRule", parent: name, max: 10240)
            try validate(self.alarmRule, name:"alarmRule", parent: name, min: 1)
            try self.insufficientDataActions?.forEach {
                try validate($0, name: "insufficientDataActions[]", parent: name, max: 1024)
                try validate($0, name: "insufficientDataActions[]", parent: name, min: 1)
            }
            try validate(self.insufficientDataActions, name:"insufficientDataActions", parent: name, max: 5)
            try self.oKActions?.forEach {
                try validate($0, name: "oKActions[]", parent: name, max: 1024)
                try validate($0, name: "oKActions[]", parent: name, min: 1)
            }
            try validate(self.oKActions, name:"oKActions", parent: name, max: 5)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case actionsEnabled = "ActionsEnabled"
            case alarmActions = "AlarmActions"
            case alarmDescription = "AlarmDescription"
            case alarmName = "AlarmName"
            case alarmRule = "AlarmRule"
            case insufficientDataActions = "InsufficientDataActions"
            case oKActions = "OKActions"
            case tags = "Tags"
        }
    }

    public struct PutDashboardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardBody", required: true, type: .string), 
            AWSShapeMember(label: "DashboardName", required: true, type: .string)
        ]

        /// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required. For more information about the syntax, see Dashboard Body Structure and Syntax.
        public let dashboardBody: String
        /// The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.
        public let dashboardName: String

        public init(dashboardBody: String, dashboardName: String) {
            self.dashboardBody = dashboardBody
            self.dashboardName = dashboardName
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardBody = "DashboardBody"
            case dashboardName = "DashboardName"
        }
    }

    public struct PutDashboardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardValidationMessages", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// If the input for PutDashboard was correct and the dashboard was successfully created or modified, this result is empty. If this result includes only warning messages, then the input was valid enough for the dashboard to be created or modified, but some elements of the dashboard may not render. If this result includes error messages, the input was not valid and the operation failed.
        public let dashboardValidationMessages: [DashboardValidationMessage]?

        public init(dashboardValidationMessages: [DashboardValidationMessage]? = nil) {
            self.dashboardValidationMessages = dashboardValidationMessages
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardValidationMessages = "DashboardValidationMessages"
        }
    }

    public struct PutInsightRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleDefinition", required: true, type: .string), 
            AWSShapeMember(label: "RuleName", required: true, type: .string), 
            AWSShapeMember(label: "RuleState", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The definition of the rule, as a JSON object. For details on the valid syntax, see Contributor Insights Rule Syntax.
        public let ruleDefinition: String
        /// A unique name for the rule.
        public let ruleName: String
        /// The state of the rule. Valid values are ENABLED and DISABLED.
        public let ruleState: String?
        /// A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values. To be able to associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission. If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use TagResource.
        public let tags: [Tag]?

        public init(ruleDefinition: String, ruleName: String, ruleState: String? = nil, tags: [Tag]? = nil) {
            self.ruleDefinition = ruleDefinition
            self.ruleName = ruleName
            self.ruleState = ruleState
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.ruleDefinition, name:"ruleDefinition", parent: name, max: 8192)
            try validate(self.ruleDefinition, name:"ruleDefinition", parent: name, min: 1)
            try validate(self.ruleDefinition, name:"ruleDefinition", parent: name, pattern: "[\\x00-\\x7F]+")
            try validate(self.ruleName, name:"ruleName", parent: name, max: 128)
            try validate(self.ruleName, name:"ruleName", parent: name, min: 1)
            try validate(self.ruleName, name:"ruleName", parent: name, pattern: "[\\x20-\\x7E]+")
            try validate(self.ruleState, name:"ruleState", parent: name, max: 32)
            try validate(self.ruleState, name:"ruleState", parent: name, min: 1)
            try validate(self.ruleState, name:"ruleState", parent: name, pattern: "[\\x20-\\x7E]+")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ruleDefinition = "RuleDefinition"
            case ruleName = "RuleName"
            case ruleState = "RuleState"
            case tags = "Tags"
        }
    }

    public struct PutInsightRuleOutput: AWSShape {


        public init() {
        }

    }

    public struct PutMetricAlarmInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "AlarmName", required: true, type: .string), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "DatapointsToAlarm", required: false, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "EvaluateLowSampleCountPercentile", required: false, type: .string), 
            AWSShapeMember(label: "EvaluationPeriods", required: true, type: .integer), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OKActions", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Threshold", required: false, type: .double), 
            AWSShapeMember(label: "ThresholdMetricId", required: false, type: .string), 
            AWSShapeMember(label: "TreatMissingData", required: false, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
        public let actionsEnabled: Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name   Valid Values (for use with IAM roles): arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0 
        public let alarmActions: [String]?
        /// The description for the alarm.
        public let alarmDescription: String?
        /// The name for the alarm. This name must be unique within your AWS account.
        public let alarmName: String
        ///  The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand. The values LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
        public let comparisonOperator: ComparisonOperator
        /// The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon CloudWatch User Guide.
        public let datapointsToAlarm: Int?
        /// The dimensions for the metric specified in MetricName.
        public let dimensions: [Dimension]?
        ///  Used only for alarms based on percentiles. If you specify ignore, the alarm state does not change during periods with too few data points to be statistically significant. If you specify evaluate or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see Percentile-Based CloudWatch Alarms and Low Data Samples. Valid Values: evaluate | ignore 
        public let evaluateLowSampleCountPercentile: String?
        /// The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N. An alarm's total current evaluation period can be no longer than one day, so this number multiplied by Period cannot be more than 86,400 seconds.
        public let evaluationPeriods: Int
        /// The percentile statistic for the metric specified in MetricName. Specify a value between p0.0 and p100. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic, but not both.
        public let extendedStatistic: String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name   Valid Values (for use with IAM roles): &gt;arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0 
        public let insufficientDataActions: [String]?
        /// The name for the metric associated with the alarm. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the Dimensions, Period, Namespace, Statistic, or ExtendedStatistic parameters. Instead, you specify all this information in the Metrics array.
        public let metricName: String?
        /// An array of MetricDataQuery structures that enable you to create an alarm based on the result of a metric math expression. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. Each item in the Metrics array either retrieves a metric or performs a math expression. One item in the Metrics array is the expression that the alarm watches. You designate this expression by setting ReturnValue to true for this object in the array. For more information, see MetricDataQuery. If you use the Metrics parameter, you cannot include the MetricName, Dimensions, Period, Namespace, Statistic, or ExtendedStatistic parameters of PutMetricAlarm in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the Metrics array.
        public let metrics: [MetricDataQuery]?
        /// The namespace for the metric associated specified in MetricName.
        public let namespace: String?
        /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name   Valid Values (for use with IAM roles): arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0 
        public let oKActions: [String]?
        /// The length, in seconds, used each time the metric specified in MetricName is evaluated. Valid values are 10, 30, and any multiple of 60.  Period is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the Metrics array. Be sure to specify 10 or 30 only for metrics that are stored by a PutMetricData call with a StorageResolution of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm may often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see Amazon CloudWatch Pricing. An alarm's total current evaluation period can be no longer than one day, so Period multiplied by EvaluationPeriods cannot be more than 86,400 seconds.
        public let period: Int?
        /// The statistic for the metric specified in MetricName, other than percentile. For percentile statistics, use ExtendedStatistic. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic, but not both.
        public let statistic: Statistic?
        /// A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.
        public let tags: [Tag]?
        /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
        public let threshold: Double?
        /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function. For an example of how to use this parameter, see the Anomaly Detection Model Alarm example on this page. If your alarm uses this parameter, it cannot have Auto Scaling actions.
        public let thresholdMetricId: String?
        ///  Sets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used. For more information, see Configuring How CloudWatch Alarms Treats Missing Data. Valid Values: breaching | notBreaching | ignore | missing 
        public let treatMissingData: String?
        /// The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately. If you don't specify Unit, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually metrics are published with only one unit, so the alarm will work as intended. However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's behavior is not defined and will behave un-predictably. We recommend omitting Unit so that you don't inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the INSUFFICIENT DATA state.
        public let unit: StandardUnit?

        public init(actionsEnabled: Bool? = nil, alarmActions: [String]? = nil, alarmDescription: String? = nil, alarmName: String, comparisonOperator: ComparisonOperator, datapointsToAlarm: Int? = nil, dimensions: [Dimension]? = nil, evaluateLowSampleCountPercentile: String? = nil, evaluationPeriods: Int, extendedStatistic: String? = nil, insufficientDataActions: [String]? = nil, metricName: String? = nil, metrics: [MetricDataQuery]? = nil, namespace: String? = nil, oKActions: [String]? = nil, period: Int? = nil, statistic: Statistic? = nil, tags: [Tag]? = nil, threshold: Double? = nil, thresholdMetricId: String? = nil, treatMissingData: String? = nil, unit: StandardUnit? = nil) {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.oKActions = oKActions
            self.period = period
            self.statistic = statistic
            self.tags = tags
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }

        public func validate(name: String) throws {
            try self.alarmActions?.forEach {
                try validate($0, name: "alarmActions[]", parent: name, max: 1024)
                try validate($0, name: "alarmActions[]", parent: name, min: 1)
            }
            try validate(self.alarmActions, name:"alarmActions", parent: name, max: 5)
            try validate(self.alarmDescription, name:"alarmDescription", parent: name, max: 1024)
            try validate(self.alarmDescription, name:"alarmDescription", parent: name, min: 0)
            try validate(self.alarmName, name:"alarmName", parent: name, max: 255)
            try validate(self.alarmName, name:"alarmName", parent: name, min: 1)
            try validate(self.datapointsToAlarm, name:"datapointsToAlarm", parent: name, min: 1)
            try self.dimensions?.forEach {
                try $0.validate(name: "\(name).dimensions[]")
            }
            try validate(self.dimensions, name:"dimensions", parent: name, max: 10)
            try validate(self.evaluateLowSampleCountPercentile, name:"evaluateLowSampleCountPercentile", parent: name, max: 255)
            try validate(self.evaluateLowSampleCountPercentile, name:"evaluateLowSampleCountPercentile", parent: name, min: 1)
            try validate(self.evaluationPeriods, name:"evaluationPeriods", parent: name, min: 1)
            try validate(self.extendedStatistic, name:"extendedStatistic", parent: name, pattern: "p(\\d{1,2}(\\.\\d{0,2})?|100)")
            try self.insufficientDataActions?.forEach {
                try validate($0, name: "insufficientDataActions[]", parent: name, max: 1024)
                try validate($0, name: "insufficientDataActions[]", parent: name, min: 1)
            }
            try validate(self.insufficientDataActions, name:"insufficientDataActions", parent: name, max: 5)
            try validate(self.metricName, name:"metricName", parent: name, max: 255)
            try validate(self.metricName, name:"metricName", parent: name, min: 1)
            try self.metrics?.forEach {
                try $0.validate(name: "\(name).metrics[]")
            }
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
            try self.oKActions?.forEach {
                try validate($0, name: "oKActions[]", parent: name, max: 1024)
                try validate($0, name: "oKActions[]", parent: name, min: 1)
            }
            try validate(self.oKActions, name:"oKActions", parent: name, max: 5)
            try validate(self.period, name:"period", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.thresholdMetricId, name:"thresholdMetricId", parent: name, max: 255)
            try validate(self.thresholdMetricId, name:"thresholdMetricId", parent: name, min: 1)
            try validate(self.treatMissingData, name:"treatMissingData", parent: name, max: 255)
            try validate(self.treatMissingData, name:"treatMissingData", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actionsEnabled = "ActionsEnabled"
            case alarmActions = "AlarmActions"
            case alarmDescription = "AlarmDescription"
            case alarmName = "AlarmName"
            case comparisonOperator = "ComparisonOperator"
            case datapointsToAlarm = "DatapointsToAlarm"
            case dimensions = "Dimensions"
            case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
            case evaluationPeriods = "EvaluationPeriods"
            case extendedStatistic = "ExtendedStatistic"
            case insufficientDataActions = "InsufficientDataActions"
            case metricName = "MetricName"
            case metrics = "Metrics"
            case namespace = "Namespace"
            case oKActions = "OKActions"
            case period = "Period"
            case statistic = "Statistic"
            case tags = "Tags"
            case threshold = "Threshold"
            case thresholdMetricId = "ThresholdMetricId"
            case treatMissingData = "TreatMissingData"
            case unit = "Unit"
        }
    }

    public struct PutMetricDataInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricData", required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Namespace", required: true, type: .string)
        ]

        /// The data for the metric. The array can include no more than 20 metrics per call.
        public let metricData: [MetricDatum]
        /// The namespace for the metric data. To avoid conflicts with AWS service namespaces, you should not specify a namespace that begins with AWS/ 
        public let namespace: String

        public init(metricData: [MetricDatum], namespace: String) {
            self.metricData = metricData
            self.namespace = namespace
        }

        public func validate(name: String) throws {
            try self.metricData.forEach {
                try $0.validate(name: "\(name).metricData[]")
            }
            try validate(self.namespace, name:"namespace", parent: name, max: 255)
            try validate(self.namespace, name:"namespace", parent: name, min: 1)
            try validate(self.namespace, name:"namespace", parent: name, pattern: "[^:].*")
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "MetricData"
            case namespace = "Namespace"
        }
    }

    public struct Range: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp)
        ]

        /// The end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        public let endTime: TimeStamp
        /// The start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        public let startTime: TimeStamp

        public init(endTime: TimeStamp, startTime: TimeStamp) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct SetAlarmStateInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: true, type: .string), 
            AWSShapeMember(label: "StateReason", required: true, type: .string), 
            AWSShapeMember(label: "StateReasonData", required: false, type: .string), 
            AWSShapeMember(label: "StateValue", required: true, type: .enum)
        ]

        /// The name for the alarm. This name must be unique within the AWS account. The maximum length is 255 characters.
        public let alarmName: String
        /// The reason that this alarm is set to this specific state, in text format.
        public let stateReason: String
        /// The reason that this alarm is set to this specific state, in JSON format. For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.
        public let stateReasonData: String?
        /// The value of the state.
        public let stateValue: StateValue

        public init(alarmName: String, stateReason: String, stateReasonData: String? = nil, stateValue: StateValue) {
            self.alarmName = alarmName
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateValue = stateValue
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, max: 255)
            try validate(self.alarmName, name:"alarmName", parent: name, min: 1)
            try validate(self.stateReason, name:"stateReason", parent: name, max: 1023)
            try validate(self.stateReason, name:"stateReason", parent: name, min: 0)
            try validate(self.stateReasonData, name:"stateReasonData", parent: name, max: 4000)
            try validate(self.stateReasonData, name:"stateReasonData", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case stateReason = "StateReason"
            case stateReasonData = "StateReasonData"
            case stateValue = "StateValue"
        }
    }

    public struct StatisticSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Maximum", required: true, type: .double), 
            AWSShapeMember(label: "Minimum", required: true, type: .double), 
            AWSShapeMember(label: "SampleCount", required: true, type: .double), 
            AWSShapeMember(label: "Sum", required: true, type: .double)
        ]

        /// The maximum value of the sample set.
        public let maximum: Double
        /// The minimum value of the sample set.
        public let minimum: Double
        /// The number of samples used for the statistic set.
        public let sampleCount: Double
        /// The sum of values for the sample set.
        public let sum: Double

        public init(maximum: Double, minimum: Double, sampleCount: Double, sum: Double) {
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
        }

        private enum CodingKeys: String, CodingKey {
            case maximum = "Maximum"
            case minimum = "Minimum"
            case sampleCount = "SampleCount"
            case sum = "Sum"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
        public let key: String
        /// The value for the specified tag key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The ARN of the CloudWatch resource that you're adding tags to. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name   The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name   For more information on ARN format, see  Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference.
        public let resourceARN: String
        /// The list of key-value pairs to associate with the alarm.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 1024)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceOutput: AWSShape {


        public init() {
        }

    }

    public struct UntagResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list, encoding: .list(member:"member"))
        ]

        /// The ARN of the CloudWatch resource that you're removing tags from. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name   The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name   For more information on ARN format, see  Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference.
        public let resourceARN: String
        /// The list of tag keys to remove from the resource.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 1024)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceOutput: AWSShape {


        public init() {
        }

    }
}
